// Copyright (c) 2025 Morgan Skillicorn. All rights reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "HoudiniPublicAPI.h"
#include "HoudiniPublicAPIBlueprintLib.h"
#include "HoudiniPublicAPIAssetWrapper.h"
#include "HoudiniAsset.h"
#include "Hapi.generated.h"

UCLASS()
class REALTIMEROADSSYSTEMS_API AHapi : public AActor
{
    GENERATED_BODY()

public:
    AHapi();

    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Debug Tools")
    UHoudiniAsset* TestHDA;

#if WITH_EDITOR
    UFUNCTION(CallInEditor, Category = "Debug Tools")
    void StartHapi();

    UFUNCTION(CallInEditor, Category = "Debug Tools")
    void SpawnHDA();

    UFUNCTION(CallInEditor, Category = "Debug Tools")
    void TestInput();
#endif

protected:
    // Set our initial parameter values: disable upvectorstart and set the scale to 0.2.
    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, CallInEditor)
    void SetInitialParameterValues(UHoudiniPublicAPIAssetWrapper* InWrapper);

    // Configure our inputs: input 0 is a cube and input 1 a helix.
//    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, CallInEditor)
//    void SetInputs(UHoudiniPublicAPIAssetWrapper* InWrapper);

    // Print the outputs that were generated by the HDA (after a cook)
//    UFUNCTION(BlueprintNativeEvent, BlueprintCallable, CallInEditor)
//    void PrintOutputs(UHoudiniPublicAPIAssetWrapper* InWrapper);

    UPROPERTY(BlueprintReadWrite)
    UHoudiniPublicAPIAssetWrapper* AssetWrapper;

private:
    UHoudiniPublicAPI* const API = UHoudiniPublicAPIBlueprintLib::GetAPI();
};
